apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = "de.unijena.bioinf.gecko3"
version = "3.0.1-SNAPSHOT"

mainClassName = 'de.unijena.bioinf.gecko3.Gecko3'

applicationDefaultJvmArgs = ["-Xmx6G"]

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'args4j:args4j:2.0.+'
    compile 'colt:colt:1.2+'
    compile 'org.apache.commons:commons-math3:3.2'
    compile 'com.jgoodies:jgoodies-forms:1.7.+'
    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.+'
    compile 'com.lowagie:itext:4.2.1'
    compile 'com.google.guava:guava:18.0'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'

    testCompile 'junit:junit:4.+'
}

jar {
    manifest {
        attributes 'Main-Class' : mainClassName
    }

    from('.') {
        include('COPYING.LESSER')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource

    from('.') {
        include('COPYING.LESSER')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir

    from('.') {
        include('COPYING.LESSER')
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task createMoreStartScripts(type: CreateStartScripts) {
    defaultJvmOpts = ["-Xmx2G"]
    applicationName = "${startScripts.applicationName}-32bit"
    mainClassName = startScripts.mainClassName
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath

    // Set as a dependent of the builtin startScripts so
    // all the start scripts are generated together.
    startScripts.dependsOn name

    // Include the generated scripts in the distribution.
    applicationDistribution.from(outputDir) {
        include "${applicationName}", "${applicationName}.bat"
        into 'bin'
    }

    applicationDistribution.from('.') {
        include('COPYING.LESSER')
    }
}

distZip {
    archiveName "Gecko" + version + '.zip'
}

test {
    testLogging.showStandardStreams = true
    //ignoreFailures = true
}
